/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package attm.chronometer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Properties;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.Timer;

import attm.AccentureTaskTimeManager;

public class Cronometro extends javax.swing.JFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = -466694370575629013L;
	private Timer timer;  
	private int currentSegundo = 0;
	private int currentMinuto = 0;
	private int currentHora = 0;
	private int velocidade = 1000;
	private Properties messagesProperties;
	private boolean removida = false;
	private boolean ativada = false;

	public Cronometro() {
		initComponents();
		iniciarContagem();//Aqui inicia a contagem
		stopTime(); // Aqui para o tempo para que o nosso cronômetro inicie parado

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		messagesProperties = AccentureTaskTimeManager.messagesProperties;

		timeLabel = new javax.swing.JLabel();
		mainPanel = new javax.swing.JPanel();
		pauseButton = new javax.swing.JButton();
		playButton = new javax.swing.JButton();
		restartButton = new javax.swing.JButton();
		closeButton = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		timeLabel.setFont(new java.awt.Font("Arial", 1, 48)); // NOI18N
		timeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		timeLabel.setText("00:00:00");
		timeLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

		mainPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

		pauseButton.setText(messagesProperties.getProperty("cronometro.pausar"));
		pauseButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				pauseButtonActionPerformed(evt);
			}
		});

		playButton.setText(messagesProperties.getProperty("cronometro.iniciar"));
		playButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				playButtonActionPerformed(evt);
			}
		});

		restartButton.setText(messagesProperties.getProperty("cronometro.reiniciar"));
		restartButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				restartButtonActionPerformed(evt);
			}
		});

		closeButton.setText(messagesProperties.getProperty("cronometro.fechar"));
		closeButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				closeButtonActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(mainPanel);
		mainPanel.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(
				jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup()
						.addContainerGap()
						.addComponent(pauseButton)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(playButton)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(restartButton)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(closeButton)
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
				);
		jPanel1Layout.setVerticalGroup(
				jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup()
						.addContainerGap()
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(pauseButton)
								.addComponent(playButton)
								.addComponent(restartButton)
								.addComponent(closeButton))
								.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
				);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(timeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
								.addContainerGap())
				);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addContainerGap()
						.addComponent(timeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 54, Short.MAX_VALUE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap())
				);

		this.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
		timer.stop();
		if(this.isAtivada()){
			this.setAtivada(false);
		}
	}//GEN-LAST:event_jButton1ActionPerformed

	private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
		if(AccentureTaskTimeManager.existeJanelaAtivada()){
			JOptionPane.showMessageDialog(getContentPane(), messagesProperties.getProperty("janela.alarme.atividade.ativa"), messagesProperties.getProperty("janela.alarme.atividade.ativa.titulo")
					, JOptionPane.INFORMATION_MESSAGE);
		}
		else{
			this.setAtivada(true);
			timer.restart();
		}
	}//GEN-LAST:event_jButton2ActionPerformed

	private void restartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
		stopTime();
		if(this.isAtivada()){
			this.setAtivada(false);
		}
	}//GEN-LAST:event_jButton3ActionPerformed

	private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
		//        System.exit(0);
		this.setVisible(false);
	}//GEN-LAST:event_jButton4ActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(Cronometro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(Cronometro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(Cronometro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(Cronometro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new Cronometro().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton pauseButton;
	private javax.swing.JButton playButton;
	private javax.swing.JButton restartButton;
	private javax.swing.JButton closeButton;
	private javax.swing.JPanel mainPanel;
	private javax.swing.JLabel timeLabel;
	// End of variables declaration//GEN-END:variables

	private void iniciarContagem() {
		ActionListener action = new ActionListener() {  
			public void actionPerformed(ActionEvent e) {  
				currentSegundo++;

				if(currentSegundo==60){
					currentMinuto++;
					currentSegundo = 0;
				}

				if(currentMinuto==60){
					currentHora++;
					currentMinuto = 0;
				}

				String hr = currentHora <= 9? "0"+currentHora:currentHora+"";
				String min = currentMinuto <= 9? "0"+currentMinuto:currentMinuto+"";
				String seg = currentSegundo <= 9? "0"+currentSegundo:currentSegundo+"";

				timeLabel.setText(hr+":"+min+":"+seg);  
			}  
		};  
		this.timer = new Timer(velocidade, action);  
		this.timer.start();
	}

	private void stopTime() {
		timer.stop();
		currentHora = 0;
		currentMinuto = 0;
		currentSegundo = 0;
		timeLabel.setText("00:00:00");
	}
	
	public boolean isAtivada() {
		return ativada;
	}

	public void setAtivada(boolean ativada) {
		this.ativada = ativada;
	}
	
	public int getCurrentSegundo() {
		return currentSegundo;
	}

	public void setCurrentSegundo(int currentSegundo) {
		this.currentSegundo = currentSegundo;
	}

	public int getCurrentMinuto() {
		return currentMinuto;
	}

	public void setCurrentMinuto(int currentMinuto) {
		this.currentMinuto = currentMinuto;
	}

	public int getCurrentHora() {
		return currentHora;
	}

	public void setCurrentHora(int currentHora) {
		this.currentHora = currentHora;
	}
	public boolean isRemovida() {
		return removida;
	}

	public void setRemovida(boolean removida) {
		this.removida = removida;
	}
	
}
